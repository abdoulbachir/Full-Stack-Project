package com.bachir.customer;

import org.springframework.data.jpa.repository.JpaRepository;

/**
 * Repository interface for Customer entities, extending the JpaRepository interface provided by Spring Data JPA.
 * JpaRepository provides standard CRUD operations on the repository of a specific type (Customer, in this case),
 * without the need for additional code implementation. It also allows for pagination and sorting, enhancing performance.
 *
 * This interface abstracts the data layer and enables easy interactions with the database, ensuring data access
 * and manipulations related to Customer entities are handled efficiently, with a lot of boilerplate database
 * interactions already implemented.
 *
 * Specifics:
 * - The Customer entity is the domain type the repository manages. It must be a JPA entity.
 * - Integer is the type of the id of the entity the repository manages. The ID type of the entity must correspond
 *   to the ID type provided on JpaRepository.
 *
 * Custom Queries:
 * The following methods are custom defined for additional business requirements and queries:
 *
 * 1. existsCustomerByEmail(String email):
 *    - Check whether a customer exists with the specified email.
 *    - This is a derived query method provided by Spring Data JPA, allowing for dynamic query generation
 *      based on method names.
 *
 * 2. existsCustomerById(Long id):
 *    - Check whether a customer exists with the specified ID.
 *    - Similar to 'existsCustomerByEmail', this is a derived query, with the query details inferred from the method name.
 *
 * Usage:
 * The repository can be injected into a service class and used to handle database operations such as saving,
 * deleting, and querying Customer entities.
 *
 * Note:
 * - Although the methods 'existsCustomerByEmail' and 'existsCustomerById' are auto-generated by Spring Data JPA's
 *   method query derivation, it's a good practice to ensure their correctness, especially in complex scenarios or
 *   when joining multiple conditions.
 * - For custom queries beyond the capabilities of method query derivation, you can use the '@Query' annotation
 *   to specify a JPA query in SQL or JPQL.
 *
 * @author CustomerRepository
 */
public interface CustomerRepository extends JpaRepository<Customer, Integer> {

    /**
     * Checks if a customer exists with the specified email in the database.
     *
     * @param email the email of the customer.
     * @return true if a customer with the email exists, false otherwise.
     */
    boolean existsCustomerByEmail(String email);

    /**
     * Checks if a customer exists with the specified ID in the database.
     *
     * @param id the ID of the customer.
     * @return true if a customer with the ID exists, false otherwise.
     */
    boolean existsCustomerById(Long id);


    /**These two are auto-generate, so no need to be tested.
     * BUt always test when there are custom complex query I created.
     */

}
